---
title: "Randomization"
format: html
---

# Introduction  
The goals of this exercise are to:  
- Learn how to randomize CRD and RCBD in R  
- Learn how to create plot layouts with them  

# Setup  
Here is where we load the packages we will use.  
```{r setup}
# Loading packages
library(tidyverse) # for data wrangling and plotting
```

# Treatment design  
Keeping with the same motivational example we've been using, our treatment design is:  

-   2-way factorial\
-   N fertilizer rates: 0, 100, 200 kg N/ha\
-   K fertilizer rates: 0, 30, 60 kg K/ha\
-   3 x 3 = **9 treatment combinations**

Let's define our treatments above in an object.  
```{r}
trts <- crossing(nrate_kgha = c(0, 100, 200),
                 krate_kgha = c(0, 30, 60)) %>% #با استفاده از این دستور ما می توانیم ترکیب های لازم برای نیتروژن و پتاسیمم بسازیم.
  mutate(trtnum = 1:nrow(.)) %>% # این ستون تعداد ردیف ها اضافه میکنه
  mutate(trtname = paste0(nrate_kgha, "+", krate_kgha)) # اضافه کردن یک ستون برای ترکیبهای نیتروژن و پتاسیم 
trts
```


# CRD  
## Randomization  
Since it is a CRD, randomization is unrestricted.  

```{r crd_rand}
# Setting seed to get same randomization result every time
set.seed(1534) # این دستور برای تولید اعداد تصادفی استفاده می شود. در اصل اگر بخواهیم در یک مجموعه بصورت تصادفی یک عدد اختصاس بدهیم استفاده می شود ولی فرق این دستور این است که اختصاص دادن یک کد مانند 930 عدد اختصاص داده به یک آیتم دیگر تغییر نمی کند. یعنی هر بار این دستور با کد 930 اجرا شود نتایج تغییر نمی کند. اما اگر 930 را تغییر دهیم تغییر میکند. 

crd_rand  <- crossing(trtname = trts$trtname,
                      rep = 1:4) %>% # برای تکرار آزمایش این دستور اجرا شد. یعنی ما 9 آزمایش داشتیم که اگر 4 بار تکرار کنیم می شود 36 آزمایش
  
    # Since plots are organized without a structure, let's number them 1 through 36
  mutate(plot = 1:nrow(.)) %>% # برای اضافه کردن یک ستون جهت اختصاص شماره ردیف به تکرار آزمایش ها
  # Randomizing trtname to plots, without restrictions 
  mutate(plot = sample(plot)) %>% # برای اوررایت کردن ردیف ها 
  arrange(plot) # برای سورت کردن ر دیف ها

crd_rand
```

## Plot layout  
Let's create a structure for plot layout in different rows and columns.  
The number of rows and columns could be decided based on the actual field layout. For ex., do you have enough space for 9 columns and 4 rows, or 9 rows and 4 columns?  

Let's assume we have space for 9 rows and 4 columns.  

```{r crd_layout}
crd_layout <- crd_rand %>%
  # Defining number of rows and columns in the field for plotting purposes
  mutate(row = rep(1:4, each = 9)) %>% # برای اضافه کردن یک ستون که به هر بلوک یک عدد اختصاص بدهد این بخش انجام می دهیم.ما چهار بلوک داریم که هر  بلوک 9 آزمایش یا تریتمنت دارد. 
  mutate(col = rep(seq(from = 1,
                   to = 9,
                   by =1),times = 4)) %>%# یک ستون دیگر برای ویژوالیزیشن اضافه می کنیم. شبیه همان ستون قبلی ولی با فرمت دیگه
  # Creating plot and trtname labels for plotting
  mutate(lab = paste0(plot, "\n", trtname))
crd_layout
```

Now, let's plot it.
```{r crd map}
ggplot(data = crd_layout, aes(x = row, y = -col)) +
  geom_tile(aes(fill = trtname), color = "black", show.legend = F) +
  geom_text(aes(label = lab), vjust = 0.5) +
  labs(title = "CRD Randomization of a 3x3 Factorial (9 treatments)") +
  theme_void() +
  theme(legend.position = "none",plot.title  = element_text(hjust = 0.5)) +
  scale_fill_viridis_d()

```
```{r}
ggsave("../output/CRD_layoutmap.png",
       width = 12,
       height = 8,
       bg = "white")
```

Notice how due to unrestricted randomization, we had the replication of some treatments falling in neighboring plots, e.g. plots 12 and 13 have the same treatment.  


# RCBD  
## Randomization  
```{r rcbd_rand}
# Setting seed to get same randomization result every time
set.seed(1534)

rcbd_rand <- crossing(trtname = trts$trtname,
                      rep = 1:4) %>%
  arrange(rep) %>%
  
  group_by(rep) %>%
  mutate(trtname = sample(trtname)) %>%
  mutate(plot =  (rep*100) + 1:9)%>%
  ungroup()

rcbd_rand
```

Let's check if in fact each treatment appears once per block.  
```{r}
rcbd_rand %>%
  group_by(rep) %>%
  tally() #%>%
  #filter(n>1) #برای اینکه چک کنیم دقیقا چند بلوک و هر بلوک چند آزمایش دارد این کار انجام شده است. 
```

## Plot layout  
```{r rcbd_layout}
rcbd_layout <- rcbd_rand %>%
  # Defining number of rows and columns in the field for plotting purposes
  mutate(row = rep(1:4, each = 9)) %>%
  mutate(col = rep(seq(from = 1, 
                       to = 9, #total number of treatments, 
                       by = 1), 
                   times = 4 #total number of blocks
  )) %>%
  # Creating plot and trtname labels for plotting
  mutate(lab = paste0(plot, "\n", trtname))

rcbd_layout
```

Now, let's plot it.
```{r rcbd map}
ggplot(data = rcbd_layout, aes(x = row, y = -col))+
  geom_tile(aes(fill = trtname),color = "black",show.legend = F)+
  geom_text(aes(label = plot), fontface = "bold", vjust = -.8)+
  geom_text(aes(label = trtname), vjust = 1)+
  labs(title = "RCBD randomization of a 3 x 3 factorial (9 treatments)") +
  theme_void()+
  theme(legend.position = "none",plot.title  = element_text(hjust = 0.5)) +
  scale_fill_ordinal()
```

Notice how now each treatment appears only once per column, where column represents the reps or blocks.  

# Exporting to file  
If this is in fact your study, you may want to export both the field randomization table AND the layout map.  

Let's do that below for the RCBD example.  

```{r}
rcbd_rand %>%
    # Retrieving other information contained in trts
  left_join(trts) %>%
  # Rearranging columns  
  dplyr::select(plot, rep, trtname, trtnum,
                nrate_kgha, krate_kgha) %>%
  write_csv("../output/RCBD_randomization_table.csv")

```

`ggsave()` will save the last plot created in the session, even if from an above chunk. Since the last plot we created was the RCBD layout, we can just go ahead and call ggsave here.  

```{r}
ggsave("../output/RCBD_layoutmap.png",
       width = 12,
       height = 8,
       bg = "white")
```


